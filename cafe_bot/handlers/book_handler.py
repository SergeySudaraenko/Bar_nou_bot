from dotenv import load_dotenv
import os
import requests
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_DATE, SELECT_TIME, ENTER_NAME, ENTER_PHONE = range(4)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# Telegram bot token
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # –í–∞—à –ª–∏—á–Ω—ã–π Chat ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º
SPANISH_MONTHS = [
    "Ene", "Feb", "Mar", "Abr", "May", "Jun",
    "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
def send_to_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ Bar_Nou_Bot –≤ Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,  # ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        "text": message
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


async def start_booking(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 30 –¥–Ω–µ–π."""
    query = update.callback_query
    await query.answer()

    now = datetime.now()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ 30 –¥–Ω–µ–π
    keyboard = []
    for i in range(0, 30, 5):  # –ü–æ—Å—Ç—Ä–æ—á–Ω–æ –ø–æ 5 –¥–Ω–µ–π (—É–¥–æ–±–Ω–µ–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
        row = []
        for j in range(5):
            date = now + timedelta(days=i + j)
            if i + j < 30:
                day = date.day
                month = SPANISH_MONTHS[date.month - 1]  # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º
                row.append(InlineKeyboardButton(
                    f"{day} {month}",  # –ß–∏—Å–ª–æ –∏ –º–µ—Å—è—Ü
                    callback_data=f"day_{date.strftime('%Y-%m-%d')}"
                ))
        keyboard.append(row)

    # –ö–Ω–æ–ø–∫–∞ "Cancelar"
    keyboard.append([InlineKeyboardButton("Cancelar", callback_data="cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "Seleccione una fecha para la reserva:",
        reply_markup=reply_markup
    )
    return SELECT_DATE


async def handle_date(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    query = update.callback_query
    await query.answer()

    choice = query.data
    if choice == "cancel":
        await query.edit_message_text("Reserva cancelada.")
        return ConversationHandler.END

    if choice.startswith("day_"):
        selected_date_str = choice.split("_")[1]
        selected_date = datetime.strptime(selected_date_str, "%Y-%m-%d")

        context.user_data["date"] = selected_date

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        keyboard = []
        for i in range(8, 24, 2):  # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤—Ä–µ–º–µ–Ω–∏ —Å 8 –¥–æ 24 —á–∞—Å–æ–≤, –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
            start_time = f"{i:02d}:00"
            end_time = f"{i+2:02d}:00"
            keyboard.append([
                InlineKeyboardButton(
                    f"{start_time} - {end_time}",
                    callback_data=f"time_{start_time}-{end_time}"
                )
            ])

        # –ö–Ω–æ–ø–∫–∞ "Cancelar"
        keyboard.append([InlineKeyboardButton("Cancelar", callback_data="cancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "Seleccione un intervalo de tiempo:",
            reply_markup=reply_markup
        )
        return SELECT_TIME

    await query.edit_message_text("Selecci√≥n incorrecta. Por favor, int√©ntalo nuevamente.")
    return SELECT_DATE


async def handle_time(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    query = update.callback_query
    await query.answer()

    choice = query.data
    if choice == "cancel":
        await query.edit_message_text("Reserva cancelada.")
        return ConversationHandler.END

    if choice.startswith("time_"):
        selected_time_range = choice.split("_")[1]
        context.user_data["time"] = selected_time_range

        await query.edit_message_text(
            f"Seleccionaste el intervalo: {selected_time_range}. Por favor, ingresa tu nombre:"
        )
        return ENTER_NAME

    await query.edit_message_text("Selecci√≥n incorrecta. Por favor, int√©ntalo nuevamente.")
    return SELECT_TIME


async def handle_name(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏."""
    name = update.message.text.strip()
    if len(name) < 2:
        await update.message.reply_text("El nombre es demasiado corto. Por favor, ingresa un nombre v√°lido:")
        return ENTER_NAME

    context.user_data["name"] = name
    await update.message.reply_text(
        f"Ingresaste el nombre: {name}. Por favor, ingresa tu n√∫mero de tel√©fono m√≥vil (Solo n√∫meros):"
    )
    return ENTER_PHONE


async def handle_phone(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    phone = update.message.text.strip()

    if phone.isdigit() and len(phone) >= 8:
        context.user_data["phone"] = phone

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        message = f"""
        üÜï *Nueva reserva de cliente:*

        üìõ *Nombre:* {context.user_data['name']}
        üìÖ *Fecha:* {context.user_data['date'].strftime('%d %b %Y')}
        üïí *Hora:* {context.user_data['time']}
        üìû *Tel√©fono:* {phone}
        """
        send_to_telegram(message)

        await update.message.reply_text(
            f"¬°Reserva completada con √©xito! Espere la llamada del administrador.\n"
            f"Nombre: {context.user_data['name']}\n"
            f"Fecha: {context.user_data['date'].strftime('%d %b %Y')}\n"
            f"Hora: {context.user_data['time']}\n"
            f"Tel√©fono: {context.user_data['phone']}"
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "Formato de tel√©fono incorrecto. Por favor, ingresa solo n√∫meros (al menos 8 d√≠gitos):"
    )
    return ENTER_PHONE


async def cancel_booking(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await update.message.reply_text("Reserva cancelada.")
    return ConversationHandler.END
